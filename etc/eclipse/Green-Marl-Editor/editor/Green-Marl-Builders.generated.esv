
module Green-Marl-Builders.generated

builders
                                                                                                                    
  // Building and analysis is defined in Stratego program or programs:                                              
  //                                                                                                                
  //   provider : stratego-program.ctree                                                                            
  //   provider : stratego-library.jar                                                                              
  //                                                                                                                
  // Analysis is carried out by a Stratego rule that can be selected as follows:                                    
  //                                                                                                                
  //   observer : analysis-rule                                                                                     
  //                                                                                                                
  // Any dynamic rules set in the analysis may be used by other semantic services,                                  
  // such as reference resolving or the builders.                                                                   
  //                                                                                                                
  // Builders may carry out custom transformations on a file or selection.                                          
  // (At run-time, they can be accessed using the toolbar button with the star icon.)                               
  // Builders can be specified as follows:                                                                          
  //                                                                                                                
  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)                          
  //                                                                                                                
  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,                   
  // and the generate-java rule is used to carry out the tranformation.                                             
  // Builder definitions can also specify any combination of the following annotations:                             
  //                                                                                                                
  //   (cursor)      The builder should always transform the tree node at the cursor.                               
  //   (meta)        Indicates the builder should only be available to meta-programmers                             
  //                 (i.e., not when the plugin is deployed to end-users).                                          
  //   (openeditor)  Indicates an editor should be opened with the result.                                          
  //   (persistent)  Indicates that the resulting file should be saved to disk.                                     
  //   (realtime)    Indicates that the resulting editor should be updated in real-time                             
  //                 as the source file is edited.                                                                  
  //   (source)      Always apply this builder to the source AST, not to the AST                                    
  //                 after it has been analyzed/desugared by the observer.                                          
  //                                                                                                                
  // Refactorings are used for transformations that modify the original source code,                                
  // while preserving the layout and syntactic sugar.                                                               
  // A custom pretty-print strategy (T -> String) is used to format newly inserted nodes,                           
  // a parenthesize strategy (T -> T) surrounds subterms with "Parenthetical(T)" when brackets are required,        
  // resugar rules are required for desugarings that are not local-to-local or desugarings that duplicate terms     
  // as the 'l' in \l -> []\ => {l: ( l -> [] )}.                                                                   
  // Finally, text-reconstruction can be overruled with a strategy (T-old, T-new) -> <try(custom-pp)> T-new,        
  // the resulting text will be indented according to its location.                                                 
  // This is sometimes needed in case the node text can not be reconstructed by replacing child texts               
  // in the original formatting.                                                                                    
  //                                                                                                                
  // Refactorings can be specified as shown below, whereby Property* indicates on which constructs the              
  // refactoring is specified (<sort>.<constructor>).                                                               
  //                                                                                                                
  // refactorings                                                                                                   
  //                                                                                                                
  //   pretty-print: prettyprint                                                                                    
  //   parenthesize: parenthesize                                                                                   
  //   resugar: resugar-node                                                                                        
  //   override reconstruction: disallow-reconstruction                                                             
  //                                                                                                                
  //   refactoring Property*: "Extract Entity" =  extract-entity (source)                                           
  //     shortcut: Shift+Alt+M                                                                                      
  //     input                                                                                                      
  //       identifier: "entity name" = ""                                                                           
  //       identifier: "property name" = ""                                                                         
  //                                                                                                                
  // The 'on save' handler can be used  to generate code as files are saved:                                        
  //                                                                                                                
  //   on save : generate-java                                                                                      