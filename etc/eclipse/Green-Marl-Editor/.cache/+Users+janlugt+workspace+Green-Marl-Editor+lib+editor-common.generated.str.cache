Module("lib/editor-common.generated",[Imports([Import("libstratego-lib"),Import("libstratego-sglr"),Import("libstratego-gpp")]),Strategies([SDefNoArgs("parse-file",CallNoArgs(SVar("parse-green_marl-file"))),SDefNoArgs("parse-green_marl-file",CallT(SVar("parse-file"),[CallNoArgs(SVar("strsglr-perror")),CallNoArgs(SVar("strsglr-report-parse-error"))],[RootApp(ImportTerm("include/Green-Marl.tbl"))])),SDefNoArgs("parse-string",CallNoArgs(SVar("parse-green_marl-string"))),SDefNoArgs("parse-green_marl-string",CallT(SVar("parse-string"),[CallNoArgs(SVar("strsglr-report-parse-error"))],[RootApp(ImportTerm("include/Green-Marl.tbl"))])),SDefNoArgs("parse-stream",CallNoArgs(SVar("parse-green_marl-stream"))),SDefNoArgs("parse-green_marl-stream",CallT(SVar("parse-stream"),[CallNoArgs(SVar("strsglr-report-parse-error"))],[RootApp(ImportTerm("include/Green-Marl.tbl"))])),SDefNoArgs("pp-green_marl-string",Seq(CallT(SVar("ast2abox"),[],[NoAnnoList(List([RootApp(ImportTerm("include/Green-Marl.generated.pp.af")),RootApp(ImportTerm("include/Green-Marl.pp.af"))]))]),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("100"))])))]),Strategies([RDef("open-import",[DefaultVarDec("resolve-path"),DefaultVarDec("parse-file"),DefaultVarDec("record-declarations")],Rule(Var("import"),Var("import"),IfThen(Not(AM(Build(Var("import")),NoAnnoList(Op("COMPLETION",[Wld])))),Seq(Assign(Var("path"),App(CallNoArgs(SVar("resolve-path")),Var("import"))),Seq(Assign(Var("cache-path"),App(CallNoArgs(SVar("import-cache-path")),Var("path"))),IfThen(Not(BA(CallNoArgs(SVar("IsImported")),Var("path"))),Seq(GenDynRules([SetDynRuleMatch(DynRuleId(RDecNoArgs("IsImported")),Var("path"))]),Seq(LChoice(Seq(BA(CallNoArgs(SVar("is-newer")),NoAnnoList(Tuple([Var("cache-path"),Var("path")]))),Assign(Var("file"),App(CallNoArgs(SVar("ReadFromFile")),Var("cache-path")))),Seq(Assign(Var("file"),App(CallNoArgs(SVar("parse-file")),Var("path"))),IfThen(BA(CallNoArgs(SVar("file-exists")),Var("path")),BA(CallNoArgs(SVar("WriteToBinaryFile")),NoAnnoList(Tuple([Var("cache-path"),Var("file")])))))),DynRuleScope([DynRuleScopeId("CurrentFile")],Seq(GenDynRules([DynRuleAssign(DynRuleId(RDecNoArgs("CurrentFile")),Var("path"))]),BA(CallNoArgs(SVar("record-declarations")),Var("file")))))))))))),RDef("open-wildcard-import",[DefaultVarDec("resolve-path"),DefaultVarDec("parse-file"),DefaultVarDec("record-declarations"),DefaultVarDec("is-source-file")],Rule(Var("import"),Var("import"),IfThen(Not(AM(Build(Var("import")),NoAnnoList(Op("COMPLETION",[Wld])))),Seq(Assign(Var("path"),App(CallNoArgs(SVar("resolve-path")),Var("import"))),Seq(CallNoArgs(SVar("readdir")),Seq(Call(SVar("list-loop"),[IfThen(CallNoArgs(SVar("is-source-file")),LChoice(BA(Call(SVar("open-import"),[Id,CallNoArgs(SVar("parse-file")),CallNoArgs(SVar("record-declarations"))]),NoAnnoList(StringQuotation1("                ",[StringEscape1("                ",Var("path")),QStr("/"),StringEscape1("                       ",RootApp(Id))]))),Call(SVar("try"),[Match(Var("one-failed"))])))]),Not(Build(Var("one-failed"))))))))),RDefNoArgs("import-cache-path",Rule(Var("full-path"),Var("cache-path"),[WithClause(Seq(Assign(Var("project-path"),RootApp(CallNoArgs(SVar("project-path")))),Seq(Assign(Var("cache-dir"),App(LChoice(CallNoArgs(SVar("file-exists")),CallNoArgs(SVar("mkdir"))),NoAnnoList(StringQuotation1("                                               ",[StringEscape1("                                               ",Var("project-path")),QStr("/.cache")])))),Seq(Assign(Var("full-path'"),App(Seq(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"/\"")),NoAnnoList(Str("\"+\""))]),Seq(CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"\\\\\"")),NoAnnoList(Str("\"+\""))]),CallT(SVar("string-replace"),[],[NoAnnoList(Str("\":\"")),NoAnnoList(Str("\"+\""))]))),Var("full-path"))),Assign(Var("cache-path"),NoAnnoList(StringQuotation1("                        ",[StringEscape1("                        ",Var("cache-dir")),QStr("/"),StringEscape1("                                    ",Var("full-path'")),QStr(".sig")])))))))])),SDefNoArgs("project-path",PrimNoArgs("\"SSL_EXT_projectpath\"")),SDefNoArgs("plugin-path",PrimNoArgs("\"SSL_EXT_pluginpath\"")),SDefNoArgs("candidate-sorts",PrimNoArgs("\"SSL_EXT_candidatesorts\"")),RDefNoArgs("is-newer",Rule(NoAnnoList(Tuple([Var("file1"),Var("file2")])),RootApp(Id),BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(Seq(CallNoArgs(SVar("file-exists")),CallNoArgs(SVar("modification-time"))),Var("file1")),App(Seq(CallNoArgs(SVar("file-exists")),CallNoArgs(SVar("modification-time"))),Var("file2"))])))))]),Strategies([SDefNoArgs("editor-init",Seq(Call(SVar("try"),[CallNoArgs(SVar("dr-scope-all-end"))]),CallNoArgs(SVar("dr-scope-all-start")))),RDefNoArgs("refresh-workspace-file",RuleNoCond(Var("path"),RootApp(Prim("\"SSL_EXT_refreshresource\"",[Var("path")])))),SDefNoArgs("string-starts-with-capital",Seq(CallNoArgs(SVar("explode-string")),Seq(CallNoArgs(SVar("Hd")),CallNoArgs(SVar("is-upper")))))]),Strategies([SDefNoArgs("origin-term",Prim("\"SSL_EXT_origin_term\"",[RootApp(Id)])),SDefNoArgs("origin-text",Prim("\"SSL_EXT_origin_text\"",[RootApp(Id)])),SDefNoArgs("origin-offset",Prim("\"SSL_EXT_origin_offset\"",[RootApp(Id)])),SDefNoArgs("origin-location",Prim("\"SSL_EXT_origin_location\"",[RootApp(Id)])),SDefNoArgs("origin-line",AM(CallNoArgs(SVar("origin-location")),NoAnnoList(Tuple([RootApp(Id),Wld,Wld,Wld])))),SDefNoArgs("origin-column",AM(CallNoArgs(SVar("origin-location")),NoAnnoList(Tuple([Wld,RootApp(Id),Wld,Wld])))),SDefNoArgs("origin-strip",Prim("\"SSL_EXT_origin_strip\"",[RootApp(Id)])),SDefT("origin-equal",[],[DefaultVarDec("t")],Prim("\"SSL_EXT_origin_equal\"",[RootApp(Id),Var("t")])),SDefNoArgs("origin-surrounding-comments",Prim("\"SSL_EXT_origin_surrounding_comments\"",[NoAnnoList(Str("\"Green-Marl\"")),RootApp(Id)])),SDefNoArgs("origin-documentation-comment",Seq(CallNoArgs(SVar("origin-surrounding-comments")),Seq(Call(SVar("filter"),[Call(SVar("string-as-chars"),[CallNoArgs(SVar("documentation-comment-chars"))])]),CallNoArgs(SVar("concat-strings"))))),RDefNoArgs("documentation-comment-chars",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Char("'*'"))],Var(ListVar("c*")))),App(Call(SVar("ltrim"),[Choice(CharCong("' '"),Choice(CharCong("'\\t'"),Choice(CharCong("'\\n'"),CharCong("'\\r'"))))]),Var(ListVar("c*"))))),SDef("origin-track-forced",[DefaultVarDec("s")],Seq(Build(NoAnnoList(List([RootApp(Id)]))),Seq(All(CallNoArgs(SVar("s"))),Match(NoAnnoList(List([RootApp(Id)]))))))]),Strategies([RDefT("desugar-position",[DefaultVarDec("desugar")],[DefaultVarDec("ast")],Rule(Var("position"),Var("position'"),Seq(Assign(Var("ast'"),App(CallT(SVar("at-position"),[Build(AnnoList(RootApp(Id),[NoAnnoList(Op("MARKER",[]))]))],[Var("position")]),Var("ast"))),Seq(Assign(Var("ast''"),App(Call(SVar("topdown"),[Call(SVar("repeat"),[Call(SVar("preserve-annos"),[ScopeDefault(Seq(Match(Var("x")),Seq(CallNoArgs(SVar("desugar")),Not(Match(Var("x"))))))])])]),Var("ast'"))),Assign(Var("position'"),App(Call(SVar("position-of-term"),[ScopeDefault(Seq(Match(AnnoList(Wld,[Var(ListVar("a*"))])),BA(One(Match(NoAnnoList(Op("MARKER",[])))),Var(ListVar("a*")))))]),Var("ast''"))))))),RDefT("at-position",[DefaultVarDec("s")],[DefaultVarDec("position")],Rule(NoAnnoList(Explode(Var("c"),Var(ListVar("t*")))),Var("t'"),[WhereClause(AM(Build(Var("position")),NoAnnoList(ListTail([Var("i")],Var("position'"))))),WhereClause(Assign(Var("t'"),NoAnnoList(Explode(Var("c"),App(Call(SVar("at-index"),[CallT(SVar("at-position"),[CallNoArgs(SVar("s"))],[Var("position'")])]),NoAnnoList(Tuple([Var("i"),Var(ListVar("t*"))])))))))])),RDefT("at-position",[DefaultVarDec("s")],[DefaultVarDec("position")],Rule(Var("t"),Var("t'"),Seq(AM(Build(Var("position")),NoAnnoList(List([]))),Assign(Var("t'"),App(CallNoArgs(SVar("s")),Var("t")))))),RDef("position-of-term",[DefaultVarDec("is-term")],Rule(Var("t"),NoAnnoList(List([])),CallNoArgs(SVar("is-term")))),RDef("position-of-term",[DefaultVarDec("is-term")],RuleNoCond(NoAnnoList(Explode(Wld,Var(ListVar("t*")))),App(CallT(SVar("position-of-term"),[CallNoArgs(SVar("is-term"))],[NoAnnoList(Int("0"))]),Var(ListVar("t*"))))),RDefT("position-of-term",[DefaultVarDec("is-term")],[DefaultVarDec("start-index")],Rule(NoAnnoList(ListTail([Var("t")],Var(ListVar("t*")))),Var("position"),CondChoice(Assign(Var(ListVar("i*")),App(Call(SVar("position-of-term"),[CallNoArgs(SVar("is-term"))]),Var("t"))),Assign(Var("position"),NoAnnoList(ListTail([Var("start-index")],Var(ListVar("i*"))))),Assign(Var("position"),App(CallT(SVar("position-of-term"),[CallNoArgs(SVar("is-term"))],[App(CallNoArgs(SVar("inc")),Var("start-index"))]),Var(ListVar("t*"))))))),RDefT("term-at-position",[],[DefaultVarDec("position")],Rule(Var("t"),Var("t'"),CallT(SVar("at-position"),[Match(Var("t'"))],[Var("position")]))),RDefT("parent-at-position",[],[DefaultVarDec("position")],Rule(Var("t"),Var("t'"),Seq(AM(Build(Var("position")),NoAnnoList(List([Var("i"),Wld]))),Assign(Var("t'"),App(CallT(SVar("subterm-at"),[],[Var("i")]),Var("t")))))),RDefT("parent-at-position",[],[DefaultVarDec("position")],Rule(Var("t"),App(CallT(SVar("parent-at-position"),[],[Var("position'")]),Var("t'")),Seq(AM(Build(Var("position")),NoAnnoList(ListTail([Var("i")],As(Var("position'"),NoAnnoList(ListTail([Wld,Wld],Wld)))))),Assign(Var("t'"),App(CallT(SVar("subterm-at"),[],[Var("i")]),Var("t")))))),RDefT("subterm-at",[],[DefaultVarDec("index")],RuleNoCond(NoAnnoList(Explode(Wld,Var(ListVar("t*")))),App(CallT(SVar("index"),[],[App(CallNoArgs(SVar("inc")),Var("index"))]),Var(ListVar("t*")))))]),Signature([Constructors([OpDecl("COMPLETION",FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Term")))),OpDecl("NOCONTEXT",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Term")))),OpDecl("MARKER",ConstType(SortNoArgs("Term"))),OpDecl("Module",FunType([ConstType(SortNoArgs("ID")),ConstType(Sort("List",[SortNoArgs("Entity")]))],ConstType(SortNoArgs("Module")))),OpDecl("Entity",FunType([ConstType(SortNoArgs("ID")),ConstType(Sort("List",[SortNoArgs("Property")]))],ConstType(SortNoArgs("Entity")))),OpDecl("Property",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("Property")))),OpDecl("Type",FunType([ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("Type"))))])]),Strategies([SDefT("set-markers",[],[DefaultVarDec("ast")],Prim("\"SSL_EXT_set_markers\"",[Var("ast")])),SDefNoArgs("queue-analysis",LChoice(Seq(CallNoArgs(SVar("is-list")),Call(SVar("list-loop"),[CallNoArgs(SVar("queue-analysis"))])),PrimNoArgs("\"SSL_EXT_queue_analysis\""))),SDefNoArgs("set-total-work-units",PrimNoArgs("\"SSL_EXT_set_total_work_units\"")),SDefNoArgs("complete-work-unit",PrimNoArgs("\"SSL_EXT_complete_work_unit\"")),SDefT("queue-strategy",[],[DefaultVarDec("s"),DefaultVarDec("description")],Prim("\"SSL_EXT_queue_strategy\"",[Var("s"),Var("description")])),SDefNoArgs("set-analysis-backgrounded",Build(NoAnnoList(Str("\"BACKGROUNDED\""))))])])