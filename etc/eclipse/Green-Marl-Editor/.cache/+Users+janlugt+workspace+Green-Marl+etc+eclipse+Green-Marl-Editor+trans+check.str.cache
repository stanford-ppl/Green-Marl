Module("check",[Imports([Import("libstratego-lib"),Import("include/Green-Marl"),Import("lib/editor-common.generated")]),Rules([RDefNoArgs("analyze",Rule(Var("t"),Var("t"),[WithClause(BA(Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("record-entity"))])]),Var("t")))])),RDefNoArgs("record-entity",Rule(NoAnnoList(Op("Entity",[Var("x"),Var("body")])),NoAnnoList(Op("Entity",[Var("x"),Var("body")])),[WithClause(GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("GetEntity")),RuleNoCond(Var("x"),Var("x")))]))]))]),Rules([RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("Property",[Var("x"),NoAnnoList(Op("Type",[Var("type")]))])),NoAnnoList(Tuple([Var("type"),NoAnnoList(StringQuotation1("                                        ",[QStr("Type "),StringEscape1("                                             ",Var("type")),QStr(" is not defined")]))])),Seq(Not(AM(Build(Var("type")),NoAnnoList(Str("\"String\"")))),Seq(Not(AM(Build(Var("type")),NoAnnoList(Str("\"Int\"")))),Not(BA(CallNoArgs(SVar("GetEntity")),Var("type"))))))),RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("Entity",[Var("x"),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                          ",[QStr("Duplicate entity name")]))])),Not(AM(BA(CallNoArgs(SVar("bagof-GetEntity")),Var("x")),NoAnnoList(List([Wld])))))),RDefNoArgs("constraint-warning",Rule(NoAnnoList(Op("Entity",[Var("x"),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                          ",[QStr("Entity names must start with a capital")]))])),Not(BA(CallNoArgs(SVar("string-starts-with-capital")),Var("x"))))),RDefNoArgs("constraint-note",RuleNoCond(NoAnnoList(Op("Module",[As(Var("x"),NoAnnoList(Str("\"example\""))),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                                      ",[QStr("This is just an example program in the \"entities\" language\n                                      (this note is defined in trans/check.str) ")]))]))))])])