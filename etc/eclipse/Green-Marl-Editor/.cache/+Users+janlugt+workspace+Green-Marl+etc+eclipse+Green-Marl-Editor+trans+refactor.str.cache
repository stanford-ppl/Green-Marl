Module("refactor",[Imports([Import("lib/refactor-common.generated"),Import("include/Green-Marl"),Import("lib/editor-common.generated"),Import("green_marl")]),Rules([RDefNoArgs("rename-entity",Rule(NoAnnoList(Tuple([Var("newname"),Var("selected-name"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Tuple([Var("ast"),Var("new-ast")]))])),Var("fatal-errors"),Var("errors"),Var("warnings")])),[WithClause(Seq(Assign(Var("new-ast"),App(Call(SVar("topdown"),[Call(SVar("try"),[CallT(SVar("rename-type"),[],[Var("selected-name"),Var("newname")])])]),Var("ast"))),Seq(Assign(NoAnnoList(Tuple([Var("errors"),Var("warnings")])),App(CallNoArgs(SVar("semantic-constraint-issues")),NoAnnoList(Tuple([Var("ast"),Var("new-ast")])))),Assign(Var("fatal-errors"),NoAnnoList(List([]))))))])),RDefT("rename-type",[],[DefaultVarDec("old-name"),DefaultVarDec("new-name")],RuleNoCond(NoAnnoList(Op("Entity",[Var("old-name"),Var("y")])),NoAnnoList(Op("Entity",[Var("new-name"),Var("y")])))),RDefT("rename-type",[],[DefaultVarDec("old-name"),DefaultVarDec("new-name")],RuleNoCond(NoAnnoList(Op("Type",[Var("old-name")])),NoAnnoList(Op("Type",[Var("new-name")])))),RDefNoArgs("semantic-constraint-issues",Rule(NoAnnoList(Tuple([Var("ast"),Var("new-ast")])),NoAnnoList(Tuple([App(CallNoArgs(SVar("diff")),NoAnnoList(Tuple([Var("new-errors"),Var("errors")]))),App(CallNoArgs(SVar("diff")),NoAnnoList(Tuple([Var("new-warnings"),Var("warnings")])))])),Seq(Assign(NoAnnoList(Tuple([Wld,Var("errors"),Var("warnings"),Wld])),App(CallNoArgs(SVar("editor-analyze")),NoAnnoList(Tuple([Var("ast"),NoAnnoList(Str("\"\"")),NoAnnoList(Str("\"\""))])))),Assign(NoAnnoList(Tuple([Wld,Var("new-errors"),Var("new-warnings"),Wld])),App(CallNoArgs(SVar("editor-analyze")),NoAnnoList(Tuple([Var("new-ast"),NoAnnoList(Str("\"\"")),NoAnnoList(Str("\"\""))])))))))])])