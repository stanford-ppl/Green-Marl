Module("green_marl",[Imports([Import("libstratego-lib"),Import("libstratego-gpp"),Import("libstratego-aterm"),Import("include/Green-Marl"),Import("lib/editor-common.generated"),Import("check"),Import("generate"),Import("refactor")]),Rules([RDefNoArgs("editor-analyze",Rule(NoAnnoList(Tuple([Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("ast"),Var("errors"),Var("warnings"),Var("notes")])),[WithClause(Seq(CallNoArgs(SVar("editor-init")),Seq(CallNoArgs(SVar("analyze")),Seq(Assign(Var("errors"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-error")),CallNoArgs(SVar("conc"))]),Var("ast"))),Seq(Assign(Var("warnings"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-warning")),CallNoArgs(SVar("conc"))]),Var("ast"))),Assign(Var("notes"),App(Call(SVar("collect-all"),[CallNoArgs(SVar("constraint-note")),CallNoArgs(SVar("conc"))]),Var("ast"))))))))])),RDefNoArgs("generate-java",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"java\""))]),Var("path"))),Assign(Var("result"),App(CallNoArgs(SVar("to-java")),Var("selected")))))])),RDefNoArgs("generate-aterm",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"aterm\""))]),Var("path"))),Assign(Var("result"),Var("selected"))))])),RDefNoArgs("editor-resolve",Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("target"),Seq(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Resolve: \"")))]),Var("node")),Seq(Assign(NoAnnoList(Op("Type",[Var("type")])),Var("node")),Assign(Var("target"),App(CallNoArgs(SVar("GetEntity")),Var("type"))))))),RDefNoArgs("editor-hover",RuleNoCond(NoAnnoList(Tuple([Var("target"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(StringQuotation1("                                                     ",[QStr("Hover help: "),StringEscape1("                                                                 ",App(CallNoArgs(SVar("write-to-string")),Var("target")))])))),RDefNoArgs("editor-complete",Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(ListTail([NoAnnoList(Str("\"String\"")),NoAnnoList(Str("\"Int\""))],Var("proposals"))),IfThen(AM(Build(Var("node")),NoAnnoList(Op("Type",[NoAnnoList(Op("COMPLETION",[Var("prefix")]))]))),Assign(Var("proposals"),RootApp(CallNoArgs(SVar("all-keys-GetEntity")))))))])])